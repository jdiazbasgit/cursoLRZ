import Head from 'next/head'
import 'antd/dist/reset.css';
import type { AppProps } from 'next/app'
import { ChakraProvider } from '@chakra-ui/react'
import theme from 'styles/theme'
import { Provider } from 'react-redux'
import store from 'src/redux/store'
import Fonts from 'styles/Fonts'

import "styles/index.scss"
import { AppProvider } from "src/context/AppContext"
import { QueryClientProvider, QueryClient } from "@tanstack/react-query"
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'

import moment from 'moment'
import 'moment/locale/es'
import {
  GoogleReCaptchaProvider,
  GoogleReCaptcha
} from 'react-google-recaptcha-v3';
import { useEffect } from 'react';
moment.locale('es')
import { useRouter } from 'next/router';
import PathName from 'src/consts/pathName';

const reCaptchaKey = process.env.NEXT_PUBLIC_RECAPTCHA_KEY || ''

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 600 * 5// milisegundo * segundo * minutos
    }
  }
})

function MyApp({ Component, pageProps }: AppProps) {

  
  // const router = useRouter();

  // useEffect(() => {
  //   router.push(PathName.home.acces);
  // }, []);
  return (
    <QueryClientProvider client={queryClient}>
      <Head>
        <title>Ninja Talent</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <div id='recatpcha' style={{ display: "none" }} />
      <GoogleReCaptchaProvider reCaptchaKey={reCaptchaKey} container={{ parameters: {}, element: "recatpcha" }}>
        <ChakraProvider theme={theme}>
          <Provider store={store}>
            <Fonts />
            <AppProvider>
              <Component {...pageProps} />
            </AppProvider>
          </Provider>
        </ChakraProvider>
        <ReactQueryDevtools initialIsOpen={false} />
      </GoogleReCaptchaProvider>
    </QueryClientProvider>
  )
}

export default MyApp
function componentDidMount() {
  throw new Error('Function not implemented.');
}

